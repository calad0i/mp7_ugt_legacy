-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
-- Version: 2021.2
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity anomaly_detection is
port (
    ap_local_block : OUT STD_LOGIC;
    ap_local_deadlock : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    muons_0 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_1 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_2 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_4 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_5 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_6 : IN STD_LOGIC_VECTOR (63 downto 0);
    muons_7 : IN STD_LOGIC_VECTOR (63 downto 0);
    jets_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    jets_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    egammas_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    taus_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    et : IN STD_LOGIC_VECTOR (31 downto 0);
    ht : IN STD_LOGIC_VECTOR (31 downto 0);
    etmiss : IN STD_LOGIC_VECTOR (31 downto 0);
    htmiss : IN STD_LOGIC_VECTOR (31 downto 0);
    ethfmiss : IN STD_LOGIC_VECTOR (31 downto 0);
    hthfmiss : IN STD_LOGIC_VECTOR (31 downto 0);
    anomaly_score : OUT STD_LOGIC_VECTOR (15 downto 0);
    anomaly_score_ap_vld : OUT STD_LOGIC );
end;


architecture behav of anomaly_detection is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "anomaly_detection_anomaly_detection,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.456000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=17,HLS_SYN_LUT=173,HLS_VERSION=2021_2}";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal add_ln712_fu_593_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln712_reg_607 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln712_reg_607_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_257_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_fu_275_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_293_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_3_fu_311_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_fu_329_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_1_fu_341_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_2_fu_353_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_3_fu_365_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_4_fu_377_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_5_fu_389_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_6_fu_401_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_7_fu_413_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_8_fu_425_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_9_fu_437_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_10_fu_449_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln737_11_fu_461_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_s_fu_473_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal nn_inputs_V_14_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cartesians_px_V_11_fu_429_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp15_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal cartesians_px_V_12_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cartesians_px_V_10_fu_417_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cartesians_px_V_fu_381_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cartesians_px_V_9_fu_405_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal cartesians_px_V_8_fu_393_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp18_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp14_fu_497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_9_fu_303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_10_fu_321_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_8_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_12_fu_345_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp22_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp21_fu_527_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_11_fu_333_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_14_fu_369_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_13_fu_357_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal nn_inputs_V_1_fu_465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp25_fu_551_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp24_fu_545_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp23_fu_557_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp19_fu_563_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_521_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp71_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_fu_267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp72_fu_581_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln712_1_fu_587_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_483_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    add_ln712_reg_607(7 downto 1) <= add_ln712_fu_593_p2(7 downto 1);
                    add_ln712_reg_607_pp0_iter1_reg(7 downto 1) <= add_ln712_reg_607(7 downto 1);
            end if;
        end if;
    end process;
    add_ln712_reg_607(0) <= '0';
    add_ln712_reg_607_pp0_iter1_reg(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln712_1_fu_587_p2 <= std_logic_vector(unsigned(y_px_V_fu_267_p3) + unsigned(tmp72_fu_581_p2));
    add_ln712_fu_593_p2 <= std_logic_vector(unsigned(add_ln712_1_fu_587_p2) + unsigned(tmp_i_fu_483_p3));
    anomaly_score <= (add_ln712_reg_607_pp0_iter1_reg & ap_const_lv8_0);

    anomaly_score_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            anomaly_score_ap_vld <= ap_const_logic_1;
        else 
            anomaly_score_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_local_block <= ap_const_logic_0;
    ap_local_deadlock <= ap_const_logic_0;

    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    cartesians_px_V_10_fu_417_p3 <= (trunc_ln737_7_fu_413_p1 & ap_const_lv1_0);
    cartesians_px_V_11_fu_429_p3 <= (trunc_ln737_8_fu_425_p1 & ap_const_lv1_0);
    cartesians_px_V_12_fu_441_p3 <= (trunc_ln737_9_fu_437_p1 & ap_const_lv1_0);
    cartesians_px_V_8_fu_393_p3 <= (trunc_ln737_5_fu_389_p1 & ap_const_lv1_0);
    cartesians_px_V_9_fu_405_p3 <= (trunc_ln737_6_fu_401_p1 & ap_const_lv1_0);
    cartesians_px_V_fu_381_p3 <= (trunc_ln737_4_fu_377_p1 & ap_const_lv1_0);
    empty_fu_575_p2 <= std_logic_vector(shift_left(unsigned(tmp71_fu_569_p2),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    nn_inputs_V_14_fu_453_p3 <= (trunc_ln737_10_fu_449_p1 & ap_const_lv1_0);
    nn_inputs_V_1_fu_465_p3 <= (trunc_ln737_11_fu_461_p1 & ap_const_lv1_0);
    tmp13_fu_521_p2 <= std_logic_vector(unsigned(tmp16_fu_515_p2) + unsigned(tmp14_fu_497_p2));
    tmp14_fu_497_p2 <= std_logic_vector(unsigned(tmp15_fu_491_p2) + unsigned(cartesians_px_V_12_fu_441_p3));
    tmp15_fu_491_p2 <= std_logic_vector(unsigned(nn_inputs_V_14_fu_453_p3) + unsigned(cartesians_px_V_11_fu_429_p3));
    tmp16_fu_515_p2 <= std_logic_vector(unsigned(tmp18_fu_509_p2) + unsigned(tmp17_fu_503_p2));
    tmp17_fu_503_p2 <= std_logic_vector(unsigned(cartesians_px_V_10_fu_417_p3) + unsigned(cartesians_px_V_fu_381_p3));
    tmp18_fu_509_p2 <= std_logic_vector(unsigned(cartesians_px_V_9_fu_405_p3) + unsigned(cartesians_px_V_8_fu_393_p3));
    tmp19_fu_563_p2 <= std_logic_vector(unsigned(tmp23_fu_557_p2) + unsigned(tmp20_fu_539_p2));
    tmp20_fu_539_p2 <= std_logic_vector(unsigned(tmp22_fu_533_p2) + unsigned(tmp21_fu_527_p2));
    tmp21_fu_527_p2 <= std_logic_vector(unsigned(y_px_V_9_fu_303_p3) + unsigned(y_px_V_10_fu_321_p3));
    tmp22_fu_533_p2 <= std_logic_vector(unsigned(y_px_V_8_fu_285_p3) + unsigned(y_px_V_12_fu_345_p3));
    tmp23_fu_557_p2 <= std_logic_vector(unsigned(tmp25_fu_551_p2) + unsigned(tmp24_fu_545_p2));
    tmp24_fu_545_p2 <= std_logic_vector(unsigned(y_px_V_11_fu_333_p3) + unsigned(y_px_V_14_fu_369_p3));
    tmp25_fu_551_p2 <= std_logic_vector(unsigned(y_px_V_13_fu_357_p3) + unsigned(nn_inputs_V_1_fu_465_p3));
    tmp71_fu_569_p2 <= std_logic_vector(unsigned(tmp19_fu_563_p2) + unsigned(tmp13_fu_521_p2));
    tmp72_fu_581_p2 <= std_logic_vector(unsigned(empty_fu_575_p2) - unsigned(tmp71_fu_569_p2));
    tmp_1_fu_275_p4 <= muons_1(16 downto 10);
    tmp_2_fu_293_p4 <= muons_2(16 downto 10);
    tmp_3_fu_311_p4 <= muons_3(16 downto 10);
    tmp_fu_257_p4 <= muons_0(16 downto 10);
    tmp_i_fu_483_p3 <= (tmp_s_fu_473_p4 & ap_const_lv2_0);
    tmp_s_fu_473_p4 <= muons_0(15 downto 10);
    trunc_ln737_10_fu_449_p1 <= taus_2(7 - 1 downto 0);
    trunc_ln737_11_fu_461_p1 <= taus_3(7 - 1 downto 0);
    trunc_ln737_1_fu_341_p1 <= jets_1(7 - 1 downto 0);
    trunc_ln737_2_fu_353_p1 <= jets_2(7 - 1 downto 0);
    trunc_ln737_3_fu_365_p1 <= jets_3(7 - 1 downto 0);
    trunc_ln737_4_fu_377_p1 <= egammas_0(7 - 1 downto 0);
    trunc_ln737_5_fu_389_p1 <= egammas_1(7 - 1 downto 0);
    trunc_ln737_6_fu_401_p1 <= egammas_2(7 - 1 downto 0);
    trunc_ln737_7_fu_413_p1 <= egammas_3(7 - 1 downto 0);
    trunc_ln737_8_fu_425_p1 <= taus_0(7 - 1 downto 0);
    trunc_ln737_9_fu_437_p1 <= taus_1(7 - 1 downto 0);
    trunc_ln737_fu_329_p1 <= jets_0(7 - 1 downto 0);
    y_px_V_10_fu_321_p3 <= (tmp_3_fu_311_p4 & ap_const_lv1_0);
    y_px_V_11_fu_333_p3 <= (trunc_ln737_fu_329_p1 & ap_const_lv1_0);
    y_px_V_12_fu_345_p3 <= (trunc_ln737_1_fu_341_p1 & ap_const_lv1_0);
    y_px_V_13_fu_357_p3 <= (trunc_ln737_2_fu_353_p1 & ap_const_lv1_0);
    y_px_V_14_fu_369_p3 <= (trunc_ln737_3_fu_365_p1 & ap_const_lv1_0);
    y_px_V_8_fu_285_p3 <= (tmp_1_fu_275_p4 & ap_const_lv1_0);
    y_px_V_9_fu_303_p3 <= (tmp_2_fu_293_p4 & ap_const_lv1_0);
    y_px_V_fu_267_p3 <= (tmp_fu_257_p4 & ap_const_lv1_0);
end behav;
