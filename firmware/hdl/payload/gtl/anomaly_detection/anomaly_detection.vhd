-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity anomaly_detection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    muons_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    muons_ce0 : OUT STD_LOGIC;
    muons_we0 : OUT STD_LOGIC;
    muons_d0 : OUT STD_LOGIC_VECTOR (143 downto 0);
    muons_q0 : IN STD_LOGIC_VECTOR (143 downto 0);
    muons_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    muons_ce1 : OUT STD_LOGIC;
    muons_we1 : OUT STD_LOGIC;
    muons_d1 : OUT STD_LOGIC_VECTOR (143 downto 0);
    muons_q1 : IN STD_LOGIC_VECTOR (143 downto 0);
    jets_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    jets_ce0 : OUT STD_LOGIC;
    jets_we0 : OUT STD_LOGIC;
    jets_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    jets_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    jets_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    jets_ce1 : OUT STD_LOGIC;
    jets_we1 : OUT STD_LOGIC;
    jets_d1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    jets_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    egammas_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    egammas_ce0 : OUT STD_LOGIC;
    egammas_we0 : OUT STD_LOGIC;
    egammas_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    egammas_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    egammas_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    egammas_ce1 : OUT STD_LOGIC;
    egammas_we1 : OUT STD_LOGIC;
    egammas_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
    egammas_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    taus_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    taus_ce0 : OUT STD_LOGIC;
    taus_we0 : OUT STD_LOGIC;
    taus_d0 : OUT STD_LOGIC_VECTOR (47 downto 0);
    taus_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    taus_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    taus_ce1 : OUT STD_LOGIC;
    taus_we1 : OUT STD_LOGIC;
    taus_d1 : OUT STD_LOGIC_VECTOR (47 downto 0);
    taus_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    et : IN STD_LOGIC_VECTOR (47 downto 0);
    ht : IN STD_LOGIC_VECTOR (47 downto 0);
    etmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    htmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    ethfmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    hthfmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    anomaly_score : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of anomaly_detection is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "anomaly_detection_anomaly_detection,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=3,HLS_SYN_LUT=4,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv144_lc_1 : STD_LOGIC_VECTOR (143 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv48_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to1 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    egammas_address0 <= ap_const_lv4_0;
    egammas_address1 <= ap_const_lv4_0;
    egammas_ce0 <= ap_const_logic_0;
    egammas_ce1 <= ap_const_logic_0;
    egammas_d0 <= ap_const_lv48_0;
    egammas_d1 <= ap_const_lv48_0;
    egammas_we0 <= ap_const_logic_0;
    egammas_we1 <= ap_const_logic_0;
    jets_address0 <= ap_const_lv4_0;
    jets_address1 <= ap_const_lv4_0;
    jets_ce0 <= ap_const_logic_0;
    jets_ce1 <= ap_const_logic_0;
    jets_d0 <= ap_const_lv64_0;
    jets_d1 <= ap_const_lv64_0;
    jets_we0 <= ap_const_logic_0;
    jets_we1 <= ap_const_logic_0;
    muons_address0 <= ap_const_lv3_0;
    muons_address1 <= ap_const_lv3_0;
    muons_ce0 <= ap_const_logic_0;
    muons_ce1 <= ap_const_logic_0;
    muons_d0 <= ap_const_lv144_lc_1;
    muons_d1 <= ap_const_lv144_lc_1;
    muons_we0 <= ap_const_logic_0;
    muons_we1 <= ap_const_logic_0;
    taus_address0 <= ap_const_lv4_0;
    taus_address1 <= ap_const_lv4_0;
    taus_ce0 <= ap_const_logic_0;
    taus_ce1 <= ap_const_logic_0;
    taus_d0 <= ap_const_lv48_0;
    taus_d1 <= ap_const_lv48_0;
    taus_we0 <= ap_const_logic_0;
    taus_we1 <= ap_const_logic_0;
end behav;
