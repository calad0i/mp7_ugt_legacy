-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity anomaly_detection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    muons_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    muons_ce0 : OUT STD_LOGIC;
    muons_q0 : IN STD_LOGIC_VECTOR (143 downto 0);
    muons_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    muons_ce1 : OUT STD_LOGIC;
    muons_q1 : IN STD_LOGIC_VECTOR (143 downto 0);
    jets_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    jets_ce0 : OUT STD_LOGIC;
    jets_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    jets_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    jets_ce1 : OUT STD_LOGIC;
    jets_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    egammas_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    egammas_ce0 : OUT STD_LOGIC;
    egammas_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    egammas_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    egammas_ce1 : OUT STD_LOGIC;
    egammas_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    taus_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    taus_ce0 : OUT STD_LOGIC;
    taus_q0 : IN STD_LOGIC_VECTOR (47 downto 0);
    taus_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    taus_ce1 : OUT STD_LOGIC;
    taus_q1 : IN STD_LOGIC_VECTOR (47 downto 0);
    et : IN STD_LOGIC_VECTOR (47 downto 0);
    ht : IN STD_LOGIC_VECTOR (47 downto 0);
    etmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    htmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    ethfmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    hthfmiss : IN STD_LOGIC_VECTOR (47 downto 0);
    anomaly_score : OUT STD_LOGIC_VECTOR (15 downto 0);
    anomaly_score_ap_vld : OUT STD_LOGIC );
end;


architecture behav of anomaly_detection is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "anomaly_detection_anomaly_detection,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=25.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=11.604000,HLS_SYN_LAT=2,HLS_SYN_TPT=2,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=59,HLS_SYN_LUT=328,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_267_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_reg_630 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_fu_295_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_reg_645 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_4_fu_311_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_4_reg_660 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_5_fu_315_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_5_reg_670 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_8_fu_319_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_8_reg_680 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_9_fu_323_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_9_reg_690 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp22_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp22_reg_700 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_705 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_277_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_1_fu_299_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal y_px_V_8_fu_287_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_12_fu_303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln728_2_fu_373_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_3_fu_385_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_6_fu_411_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_7_fu_423_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_10_fu_449_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln728_11_fu_461_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln728_6_fu_453_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln728_4_fu_435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp15_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln728_5_fu_442_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln728_3_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_397_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln728_2_fu_415_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln728_1_fu_404_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp18_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp17_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp16_fu_497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp14_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_9_fu_350_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_10_fu_358_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp21_fu_509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_11_fu_366_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_14_fu_389_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_13_fu_377_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln728_7_fu_465_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp25_fu_526_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp24_fu_520_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp23_fu_532_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_515_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp19_fu_538_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp13_fu_503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp71_fu_544_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_550_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_562_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp72_fu_556_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_1_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal y_px_V_fu_343_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln703_fu_575_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    tmp22_reg_700(7 downto 1) <= tmp22_fu_327_p2(7 downto 1);
                tmp_s_reg_705 <= muons_q1(21 downto 16);
                trunc_ln728_4_reg_660 <= trunc_ln728_4_fu_311_p1;
                trunc_ln728_5_reg_670 <= trunc_ln728_5_fu_315_p1;
                trunc_ln728_8_reg_680 <= trunc_ln728_8_fu_319_p1;
                trunc_ln728_9_reg_690 <= trunc_ln728_9_fu_323_p1;
                trunc_ln728_reg_645 <= trunc_ln728_fu_295_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_reg_630 <= muons_q1(22 downto 16);
            end if;
        end if;
    end process;
    tmp22_reg_700(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln703_1_fu_569_p2 <= std_logic_vector(unsigned(tmp_4_fu_562_p3) + unsigned(tmp72_fu_556_p2));
    add_ln703_fu_575_p2 <= std_logic_vector(unsigned(add_ln703_1_fu_569_p2) + unsigned(y_px_V_fu_343_p3));
    anomaly_score <= (add_ln703_fu_575_p2 & ap_const_lv8_0);

    anomaly_score_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            anomaly_score_ap_vld <= ap_const_logic_1;
        else 
            anomaly_score_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    egammas_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                egammas_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                egammas_address0 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                egammas_address0 <= "XXXX";
            end if;
        else 
            egammas_address0 <= "XXXX";
        end if; 
    end process;


    egammas_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                egammas_address1 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                egammas_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                egammas_address1 <= "XXXX";
            end if;
        else 
            egammas_address1 <= "XXXX";
        end if; 
    end process;


    egammas_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            egammas_ce0 <= ap_const_logic_1;
        else 
            egammas_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    egammas_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            egammas_ce1 <= ap_const_logic_1;
        else 
            egammas_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_550_p2 <= std_logic_vector(shift_left(unsigned(tmp71_fu_544_p2),to_integer(unsigned('0' & ap_const_lv8_2(8-1 downto 0)))));
    grp_fu_267_p4 <= muons_q1(22 downto 16);
    grp_fu_277_p4 <= muons_q0(22 downto 16);

    jets_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                jets_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                jets_address0 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                jets_address0 <= "XXXX";
            end if;
        else 
            jets_address0 <= "XXXX";
        end if; 
    end process;


    jets_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                jets_address1 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                jets_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                jets_address1 <= "XXXX";
            end if;
        else 
            jets_address1 <= "XXXX";
        end if; 
    end process;


    jets_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            jets_ce0 <= ap_const_logic_1;
        else 
            jets_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    jets_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            jets_ce1 <= ap_const_logic_1;
        else 
            jets_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    muons_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                muons_address0 <= ap_const_lv64_3(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                muons_address0 <= ap_const_lv64_1(3 - 1 downto 0);
            else 
                muons_address0 <= "XXX";
            end if;
        else 
            muons_address0 <= "XXX";
        end if; 
    end process;


    muons_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                muons_address1 <= ap_const_lv64_2(3 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                muons_address1 <= ap_const_lv64_0(3 - 1 downto 0);
            else 
                muons_address1 <= "XXX";
            end if;
        else 
            muons_address1 <= "XXX";
        end if; 
    end process;


    muons_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            muons_ce0 <= ap_const_logic_1;
        else 
            muons_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    muons_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            muons_ce1 <= ap_const_logic_1;
        else 
            muons_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln728_1_fu_404_p3 <= (trunc_ln728_5_reg_670 & ap_const_lv1_0);
    shl_ln728_2_fu_415_p3 <= (trunc_ln728_6_fu_411_p1 & ap_const_lv1_0);
    shl_ln728_3_fu_427_p3 <= (trunc_ln728_7_fu_423_p1 & ap_const_lv1_0);
    shl_ln728_4_fu_435_p3 <= (trunc_ln728_8_reg_680 & ap_const_lv1_0);
    shl_ln728_5_fu_442_p3 <= (trunc_ln728_9_reg_690 & ap_const_lv1_0);
    shl_ln728_6_fu_453_p3 <= (trunc_ln728_10_fu_449_p1 & ap_const_lv1_0);
    shl_ln728_7_fu_465_p3 <= (trunc_ln728_11_fu_461_p1 & ap_const_lv1_0);
    shl_ln_fu_397_p3 <= (trunc_ln728_4_reg_660 & ap_const_lv1_0);

    taus_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                taus_address0 <= ap_const_lv64_3(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                taus_address0 <= ap_const_lv64_1(4 - 1 downto 0);
            else 
                taus_address0 <= "XXXX";
            end if;
        else 
            taus_address0 <= "XXXX";
        end if; 
    end process;


    taus_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                taus_address1 <= ap_const_lv64_2(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                taus_address1 <= ap_const_lv64_0(4 - 1 downto 0);
            else 
                taus_address1 <= "XXXX";
            end if;
        else 
            taus_address1 <= "XXXX";
        end if; 
    end process;


    taus_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            taus_ce0 <= ap_const_logic_1;
        else 
            taus_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    taus_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            taus_ce1 <= ap_const_logic_1;
        else 
            taus_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp13_fu_503_p2 <= std_logic_vector(unsigned(tmp16_fu_497_p2) + unsigned(tmp14_fu_479_p2));
    tmp14_fu_479_p2 <= std_logic_vector(unsigned(tmp15_fu_473_p2) + unsigned(shl_ln728_5_fu_442_p3));
    tmp15_fu_473_p2 <= std_logic_vector(unsigned(shl_ln728_6_fu_453_p3) + unsigned(shl_ln728_4_fu_435_p3));
    tmp16_fu_497_p2 <= std_logic_vector(unsigned(tmp18_fu_491_p2) + unsigned(tmp17_fu_485_p2));
    tmp17_fu_485_p2 <= std_logic_vector(unsigned(shl_ln728_3_fu_427_p3) + unsigned(shl_ln_fu_397_p3));
    tmp18_fu_491_p2 <= std_logic_vector(unsigned(shl_ln728_2_fu_415_p3) + unsigned(shl_ln728_1_fu_404_p3));
    tmp19_fu_538_p2 <= std_logic_vector(unsigned(tmp23_fu_532_p2) + unsigned(tmp20_fu_515_p2));
    tmp20_fu_515_p2 <= std_logic_vector(unsigned(tmp22_reg_700) + unsigned(tmp21_fu_509_p2));
    tmp21_fu_509_p2 <= std_logic_vector(unsigned(y_px_V_9_fu_350_p3) + unsigned(y_px_V_10_fu_358_p3));
    tmp22_fu_327_p2 <= std_logic_vector(unsigned(y_px_V_8_fu_287_p3) + unsigned(y_px_V_12_fu_303_p3));
    tmp23_fu_532_p2 <= std_logic_vector(unsigned(tmp25_fu_526_p2) + unsigned(tmp24_fu_520_p2));
    tmp24_fu_520_p2 <= std_logic_vector(unsigned(y_px_V_11_fu_366_p3) + unsigned(y_px_V_14_fu_389_p3));
    tmp25_fu_526_p2 <= std_logic_vector(unsigned(y_px_V_13_fu_377_p3) + unsigned(shl_ln728_7_fu_465_p3));
    tmp71_fu_544_p2 <= std_logic_vector(unsigned(tmp19_fu_538_p2) + unsigned(tmp13_fu_503_p2));
    tmp72_fu_556_p2 <= std_logic_vector(unsigned(empty_fu_550_p2) - unsigned(tmp71_fu_544_p2));
    tmp_4_fu_562_p3 <= (tmp_s_reg_705 & ap_const_lv2_0);
    trunc_ln728_10_fu_449_p1 <= taus_q1(7 - 1 downto 0);
    trunc_ln728_11_fu_461_p1 <= taus_q0(7 - 1 downto 0);
    trunc_ln728_1_fu_299_p1 <= jets_q0(7 - 1 downto 0);
    trunc_ln728_2_fu_373_p1 <= jets_q1(7 - 1 downto 0);
    trunc_ln728_3_fu_385_p1 <= jets_q0(7 - 1 downto 0);
    trunc_ln728_4_fu_311_p1 <= egammas_q1(7 - 1 downto 0);
    trunc_ln728_5_fu_315_p1 <= egammas_q0(7 - 1 downto 0);
    trunc_ln728_6_fu_411_p1 <= egammas_q1(7 - 1 downto 0);
    trunc_ln728_7_fu_423_p1 <= egammas_q0(7 - 1 downto 0);
    trunc_ln728_8_fu_319_p1 <= taus_q1(7 - 1 downto 0);
    trunc_ln728_9_fu_323_p1 <= taus_q0(7 - 1 downto 0);
    trunc_ln728_fu_295_p1 <= jets_q1(7 - 1 downto 0);
    y_px_V_10_fu_358_p3 <= (grp_fu_277_p4 & ap_const_lv1_0);
    y_px_V_11_fu_366_p3 <= (trunc_ln728_reg_645 & ap_const_lv1_0);
    y_px_V_12_fu_303_p3 <= (trunc_ln728_1_fu_299_p1 & ap_const_lv1_0);
    y_px_V_13_fu_377_p3 <= (trunc_ln728_2_fu_373_p1 & ap_const_lv1_0);
    y_px_V_14_fu_389_p3 <= (trunc_ln728_3_fu_385_p1 & ap_const_lv1_0);
    y_px_V_8_fu_287_p3 <= (grp_fu_277_p4 & ap_const_lv1_0);
    y_px_V_9_fu_350_p3 <= (grp_fu_267_p4 & ap_const_lv1_0);
    y_px_V_fu_343_p3 <= (tmp_reg_630 & ap_const_lv1_0);
end behav;
